name: CI/CD Pipeline

# Triggers
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Global environment variables
env:
  DOCKER_COMPOSE_VERSION: "2.24.7"
  APP_DIR: "/home/ubuntu/app"
  SERVICE_NAME: "app"  # Adjust based on your docker-compose service name

# Define jobs
jobs:
  # Build and Test job (runs on PRs and pushes)
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker images
        run: |
          docker-compose build --parallel

      - name: Run tests
        run: |
          docker-compose up -d
          # Add your test commands here, e.g.:
          # docker-compose exec ${SERVICE_NAME} npm test
          docker-compose down

  # Deploy job (runs only on push to main)
  deploy:
    needs: build-and-test  # Depends on successful build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy to EC2
        uses: shimataro/ssh-action@v2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          debug: true  # Enable for initial troubleshooting
          command: |
            set -e

            # Install dependencies
            echo "üîÑ Updating system and installing dependencies..."
            sudo apt update -y && sudo apt upgrade -y
            
            if ! command -v docker >/dev/null 2>&1; then
              echo "üê≥ Installing Docker..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo usermod -aG docker ${USER}
              sudo systemctl enable docker --now
            fi

            if ! command -v docker-compose >/dev/null 2>&1; then
              echo "üêô Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Setup application directory
            echo "üìÅ Preparing application directory..."
            mkdir -p ${{ env.APP_DIR }}
            cd ${{ env.APP_DIR }}

            # Sync repository
            echo "üîÑ Syncing repository..."
            if [ -d ".git" ]; then
              git fetch --all
              git checkout main
              git reset --hard origin/main
              git clean -fd
            else
              git clone https://github.com/${{ github.repository }} .
            fi

            # Manage Docker resources
            echo "üßπ Cleaning up Docker resources..."
            docker image prune -f
            docker system prune -f --volumes

            # Deploy application
            echo "üèóÔ∏è Deploying application..."
            docker-compose down --remove-orphans --volumes
            docker-compose build --no-cache
            docker-compose up -d --force-recreate --remove-orphans

            # Configure cron job (example for logs)
            echo "üìÖ Setting up cron job..."
            CRON_FILE="/tmp/crontab.tmp"
            CRON_JOB="*/5 * * * * ${{ env.APP_DIR }}/upload-logs-to-s3.sh"
            (crontab -l 2>/dev/null | grep -v 'upload-logs-to-s3.sh' || true; echo "$CRON_JOB") > "$CRON_FILE"
            crontab "$CRON_FILE"
            rm -f "$CRON_FILE"

            echo "‚úÖ Deployment completed!"

      - name: Verify Deployment
        uses: shimataro/ssh-action@v2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          command: |
            set -e
            cd ${{ env.APP_DIR }}
            sleep 5  # Give containers time to start
            if ! docker-compose ps | grep "Up" >/dev/null 2>&1; then
              echo "‚ùå Deployment failed: Containers not running!"
              docker-compose logs
              exit 1
            fi
            echo "‚úì Deployment verified successfully!"

      - name: Notify on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: "deployments"
          text: "üö® Deployment failed for ${{ github.repository }} on commit ${{ github.sha }}!"