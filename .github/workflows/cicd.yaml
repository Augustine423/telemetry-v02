name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build on EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
        run: |
          echo -e "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_INSTANCE_IP << EOF
            echo "Connected to EC2 for Build"

            # Install Git
            if ! command -v git >/dev/null 2>&1; then
              echo "Installing Git..."
              sudo apt-get update -y
              sudo apt-get install -y git
            fi

            # Install unzip
            if ! command -v unzip >/dev/null 2>&1; then
              echo "Installing unzip..."
              sudo apt-get install -y unzip
            fi

            # Install AWS CLI
            if ! command -v aws >/dev/null 2>&1; then
              echo "Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws
            fi

            # Configure AWS CLI
            echo "Configuring AWS CLI..."
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            aws configure set default.region "${{ secrets.AWS_REGION }}"
            aws configure set output "json"

            # Install Docker
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            # Install Docker Compose
            if ! command -v docker-compose >/dev/null 2>&1; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Clone or update the repo
            if [ -d "/home/ubuntu/telemetry-v02" ]; then
              echo "Updating existing repo..."
              cd /home/ubuntu/telemetry-v02
              git pull origin main
            else
              echo "Cloning repo..."
              git clone https://github.com/Augustine423/telemetry-v02.git /home/ubuntu/telemetry-v02
              cd /home/ubuntu/telemetry-v02
            fi

            # Create logs directory for backend (optional, remove if not needed)
            mkdir -p Backend/logs
            echo "Logs directory created"

            # Build and tag images with version
            COMMIT_SHA=$(git rev-parse --short HEAD)
            echo "Building services with tag: \${COMMIT_SHA}"
            timeout 20m docker-compose build --progress=plain || { echo "Build timed out or failed"; exit 1; }
            docker tag aioceaneye/frontend:latest aioceaneye/frontend:\${COMMIT_SHA}
            docker tag aioceaneye/backend:latest aioceaneye/backend:\${COMMIT_SHA}
          EOF
          rm -f private_key.pem

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
        run: |
          echo -e "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_INSTANCE_IP << EOF
            echo "Connected to EC2 for Deploy"

            # Navigate to project directory
            cd /home/ubuntu/telemetry-v02

            # Store current image tags as previous
            if [ -f "previous_frontend_tag.txt" ]; then
              echo "Saving current frontend tag as previous..."
              cp previous_frontend_tag.txt previous_frontend_tag_backup.txt
            fi
            if [ -f "previous_backend_tag.txt" ]; then
              echo "Saving current backend tag as previous..."
              cp previous_backend_tag.txt previous_backend_tag_backup.txt
            fi
            COMMIT_SHA=$(git rev-parse --short HEAD)
            echo "aioceaneye/frontend:\${COMMIT_SHA}" > previous_frontend_tag.txt
            echo "aioceaneye/backend:\${COMMIT_SHA}" > previous_backend_tag.txt

            # Stop any running containers
            echo "Stopping running containers..."
            docker-compose down

            # Prune unused resources (keep tagged images)
            echo "Pruning Docker system..."
            docker system prune -f

            # Deploy the new version
            echo